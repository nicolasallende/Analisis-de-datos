{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"TP3-Parte 2-RegLog","provenance":[],"collapsed_sections":["QjDP4D_ff8OY","-RwLswWAgLC3"],"mount_file_id":"10OHxA4HIvPlJeS6Php2Fk0TgoV04CQwa","authorship_tag":"ABX9TyP0UwM6E2raBX9ytp+t2Hfi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Carga de datos"],"metadata":{"id":"QjDP4D_ff8OY"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"NCOynqofwbNj"},"outputs":[],"source":["import pandas as pd\n","import sys\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import roc_auc_score\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.preprocessing import OrdinalEncoder\n","from sklearn import preprocessing\n","import numpy as np\n","from sklearn.model_selection import RandomizedSearchCV\n","from scipy.stats import randint as sp_randInt\n","from scipy.stats import loguniform\n","\n","algo = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/train')\n","algo.sort_values('timedelta',ascending=False, inplace=True)#ordeno por las dudas de mas antiguo a mas reciente, despues lo tiro es solo por las dudas para cuando haga el split\n","\n","X = algo[[ 'n_tokens_title', 'n_tokens_content',\\\n","       'n_unique_tokens', 'n_non_stop_words', 'n_non_stop_unique_tokens',\\\n","       'num_hrefs', 'num_self_hrefs', 'num_imgs', 'num_videos',\\\n","       'average_token_length', 'num_keywords', 'data_channel_is_lifestyle',\\\n","       'data_channel_is_entertainment', 'data_channel_is_bus',\\\n","       'data_channel_is_socmed', 'data_channel_is_tech',\\\n","       'data_channel_is_world', 'kw_min_min', 'kw_max_min', 'kw_avg_min',\\\n","       'kw_min_max', 'kw_max_max', 'kw_avg_max', 'kw_min_avg', 'kw_max_avg',\\\n","       'kw_avg_avg', 'self_reference_min_shares', 'self_reference_max_shares',\\\n","       'self_reference_avg_sharess', 'weekday_is_monday', 'weekday_is_tuesday',\\\n","       'weekday_is_wednesday', 'weekday_is_thursday', 'weekday_is_friday',\\\n","       'weekday_is_saturday', 'weekday_is_sunday', 'is_weekend', 'LDA_00',\\\n","       'LDA_01', 'LDA_02', 'LDA_03', 'LDA_04', 'global_subjectivity',\\\n","       'global_sentiment_polarity', 'global_rate_positive_words',\\\n","       'global_rate_negative_words', 'rate_positive_words',\\\n","       'rate_negative_words', 'avg_positive_polarity', 'min_positive_polarity',\\\n","       'max_positive_polarity', 'avg_negative_polarity',\\\n","       'min_negative_polarity', 'max_negative_polarity', 'title_subjectivity',\\\n","       'title_sentiment_polarity', 'abs_title_subjectivity',\\\n","       'abs_title_sentiment_polarity','content', 'surprise1', 'surprise2']]\n","\n","Y = algo['popular']"]},{"cell_type":"markdown","source":["# Limpieza de datos y cambiar los NAN"],"metadata":{"id":"ETyZ562sDBxW"}},{"cell_type":"code","source":["# ver de usar un simpleImputer\n","#si el dato es nan lo lleno con 0 asumo que on lo llenaron porque no tenia nada\n","X['n_tokens_title'].fillna(value = 0.0, inplace =True)\n","X['n_tokens_content'].fillna(value = 0.0, inplace =True)\n","X['n_unique_tokens'].fillna(value = 0.0, inplace =True)\n","X['n_non_stop_words'].fillna(value = 0.0, inplace =True)\n","X['n_non_stop_unique_tokens'].fillna(value = 0.0, inplace =True)\n","X['num_self_hrefs'].fillna(value = 0.0, inplace =True)\n","X['num_hrefs'].fillna(value = 0.0, inplace =True)\n","X['num_imgs'].fillna(value = 0.0, inplace =True)\n","X['num_videos'].fillna(value = 0.0, inplace =True)\n","X['num_keywords'].fillna(value = 0.0, inplace =True)\n","X['data_channel_is_bus'].fillna(value = 0.0, inplace =True)\n","X['data_channel_is_socmed'].fillna(value = 0.0, inplace =True)\n","X['data_channel_is_tech'].fillna(value = 0.0, inplace =True)\n","X['kw_min_min'].fillna(value = 0.0, inplace =True)\n","X['self_reference_avg_sharess'].fillna(value = 0.0, inplace =True)\n","X['kw_max_max'].fillna(value = 0.0, inplace =True)\n","X['kw_avg_min'].fillna(value = 0.0, inplace =True)\n","X['kw_min_avg'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_monday'].fillna(value = 0.0, inplace =True)\n","X['kw_max_min'].fillna(value = 0.0, inplace =True)\n","X['kw_min_max'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_tuesday'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_wednesday'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_thursday'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_friday'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_saturday'].fillna(value = 0.0, inplace =True)\n","X['LDA_00'].fillna(value = 0.0, inplace =True)\n","X['LDA_01'].fillna(value = 0.0, inplace =True)\n","X['LDA_02'].fillna(value = 0.0, inplace =True)\n","X['LDA_03'].fillna(value = 0.0, inplace =True)\n","X['global_sentiment_polarity'].fillna(value = 0.0, inplace =True)\n","X['global_rate_positive_words'].fillna(value = 0.0, inplace =True)\n","X['global_rate_negative_words'].fillna(value = 0.0, inplace =True)\n","X['rate_positive_words'].fillna(value = 0.0, inplace =True)\n","X['rate_negative_words'].fillna(value = 0.0, inplace =True)\n","X['avg_positive_polarity'].fillna(value = 0.0, inplace =True)\n","X['max_positive_polarity'].fillna(value = 0.0, inplace =True)\n","X['avg_negative_polarity'].fillna(value = 0.0, inplace =True)\n","X['min_negative_polarity'].fillna(value = 0.0, inplace =True)\n","X['max_negative_polarity'].fillna(value = 0.0, inplace =True)\n","X['title_subjectivity'].fillna(value = 0.0, inplace =True)\n","X['abs_title_subjectivity'].fillna(value = 0.0, inplace =True)\n","X['abs_title_sentiment_polarity'].fillna(value = 0.0, inplace =True)\n","X['content'].fillna(value = 'Sin dato', inplace =True)"],"metadata":{"id":"de8ik4FFKWbU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655140877298,"user_tz":180,"elapsed":301,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"f46b21a6-4bd6-4160-d36e-4e1cb0011512"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py:6392: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  return self._update_inplace(result)\n"]}]},{"cell_type":"markdown","source":["# Separo los datos para entrenar"],"metadata":{"id":"-RwLswWAgLC3"}},{"cell_type":"code","source":["X_train, X_valid, y_train, y_valid = train_test_split(X, Y, test_size=0.4, random_state=42)"],"metadata":{"id":"uEuCPXPVIgly"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# codifico con OneHotEncoder surprise 1"],"metadata":{"id":"oh4QkaEPDLIF"}},{"cell_type":"code","source":["#codifico surprise1 \n","ohe_surprise1 = OneHotEncoder(drop='first')\n","encoded_surprise1 = ohe_surprise1.fit_transform(X_train[['surprise1']]).todense().astype(int)\n","\n","encoded_surprise1_test = ohe_surprise1.transform(X_valid[['surprise1']]).todense().astype(int)\n","\n","X_train.surprise1 = encoded_surprise1  #pongo el surprise1 ya codificado en el X_train\n","\n","X_valid.surprise1 = encoded_surprise1_test  # idem para el test"],"metadata":{"id":"wkwM-wvXb3yk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# codifico con el CountVectorizer el \"content\""],"metadata":{"id":"TLKrpS0WDfGN"}},{"cell_type":"code","source":["#codifico content \n","vectorizer = CountVectorizer(max_features = 25)\n","encoded_content = vectorizer.fit_transform(X_train['content'].tolist()).toarray()\n","encoded_content_test =vectorizer.transform(X_valid['content'].tolist()).toarray()\n","\n","X_train.content = encoded_content #pongo el content ya codificado en el X_train\n","\n","X_valid.content = encoded_content_test #idem para el X_valid\n"],"metadata":{"id":"clSaiEbPBBOE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# codifico con OrdinalEncoder el surprise2"],"metadata":{"id":"kdl3MX5vDrhF"}},{"cell_type":"code","source":["#codifico el surprise 2 \n","\n","enc = OrdinalEncoder(handle_unknown= 'use_encoded_value', unknown_value=-1)\n","encoded_surprise2 = enc.fit_transform(X_train[['surprise2']])\n","encoded_surprise2_test = enc.transform(X_valid[['surprise2']])\n","X_train.surprise2 = encoded_surprise2  #pongo el surprise2 ya codificado en el X_train\n","X_valid.surprise2 = encoded_surprise2_test  # idem para el X_test    "],"metadata":{"id":"L3MEJvK6Nfxe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Regresion logistica y prediccion modelo"],"metadata":{"id":"ZWsbWo6gE0yb"}},{"cell_type":"code","source":["model = LogisticRegression(random_state=2)\n","#estos son los parametros del LogisticRegression uso randoms para elegir \n","parameters = dict()\n","parameters['solver'] = ['newton-cg', 'lbfgs', 'liblinear']\n","parameters['C'] = loguniform(1e-5, 10)\n","parameters['max_iter'] = sp_randInt(100, 300)"],"metadata":{"id":"UtWRX2ZzJwgT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Uso randomizedSearchCV para entrenar todo, pasandole para que implemente logistic regression con los parametros de arriba  \n","randm_src1 = RandomizedSearchCV(estimator=model, param_distributions = parameters,cv= 2, n_iter = 10, n_jobs=-1,scoring = 'roc_auc', random_state=2)\n","resultados1 = randm_src1.fit(X_train, y_train)\n","\n","randm_src2 = RandomizedSearchCV(estimator=model, param_distributions = parameters,cv= 2, n_iter = 10, n_jobs=-1,scoring = 'roc_auc', random_state=5)\n","resultados2 = randm_src2.fit(X_train, y_train)\n","\n","randm_src3 = RandomizedSearchCV(estimator=model, param_distributions = parameters,cv= 2, n_iter = 10, n_jobs=-1,scoring = 'roc_auc', random_state=42)\n","resultados3 = randm_src3.fit(X_train, y_train)\n","\n","randm_src4 = RandomizedSearchCV(estimator=model, param_distributions = parameters,cv= 2, n_iter = 10, n_jobs=-1,scoring = 'roc_auc', random_state=84)\n","resultados4 = randm_src4.fit(X_train, y_train)\n","#tarda 5/6 min aproximadamente"],"metadata":{"id":"CQcHz7JSBJpg","executionInfo":{"status":"ok","timestamp":1655141215058,"user_tz":180,"elapsed":313070,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ac7d9c69-cf6a-442b-89f1-5956d8657a07"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:426: LineSearchWarning: Rounding errors prevent the line search from converging\n","  warn(msg, LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/optimize.py:203: UserWarning: Line Search failed\n","  warnings.warn(\"Line Search failed\")\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:466: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/scipy/optimize/linesearch.py:314: LineSearchWarning: The line search algorithm did not converge\n","  warn('The line search algorithm did not converge', LineSearchWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/optimize.py:212: ConvergenceWarning: newton-cg failed to converge. Increase the number of iterations.\n","  ConvergenceWarning,\n"]}]},{"cell_type":"code","source":["print('Mejor resultado para el 1: %s' % resultados1.best_score_)\n","print('Mejores Hyperparametros para el 1: %s' % resultados1.best_params_)\n","\n","print('Mejor resultado para el 2: %s' % resultados2.best_score_)\n","print('Mejores Hyperparametros para el 2: %s' % resultados2.best_params_)\n","\n","print('Mejor resultado para el 3: %s' % resultados3.best_score_)\n","print('Mejores Hyperparametros para el 3: %s' % resultados3.best_params_)\n","\n","print('Mejor resultado para el 4: %s' % resultados4.best_score_)\n","print('Mejores Hyperparametros para el 4: %s' % resultados4.best_params_)"],"metadata":{"id":"y2MLRFNES37p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655131463043,"user_tz":180,"elapsed":321,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"b9ce8a02-040d-4a9e-ea15-45fab41c13db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mejor resultado para el 1: 0.6835749104658941\n","Mejores Hyperparametros para el 1: {'C': 0.12535912913866828, 'max_iter': 202, 'solver': 'newton-cg'}\n","Mejor resultado para el 2: 0.6755440633184968\n","Mejores Hyperparametros para el 2: {'C': 0.0015220235862922233, 'max_iter': 173, 'solver': 'newton-cg'}\n","Mejor resultado para el 3: 0.6833636292605063\n","Mejores Hyperparametros para el 3: {'C': 0.246583294585491, 'max_iter': 288, 'solver': 'newton-cg'}\n","Mejor resultado para el 4: 0.6829852682490583\n","Mejores Hyperparametros para el 4: {'C': 0.012150832398200799, 'max_iter': 230, 'solver': 'newton-cg'}\n"]}]},{"cell_type":"code","source":["#validacion del 1\n","proba_preds = randm_src1.predict_proba(X_valid)[:,1]\n","print(roc_auc_score(y_valid, proba_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ilfAziKHv4VE","executionInfo":{"status":"ok","timestamp":1655131488664,"user_tz":180,"elapsed":325,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"c9f02aeb-b3a9-40d1-9adf-a75f4148b57a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.6848614821151966\n"]}]},{"cell_type":"code","source":["#Validacion del 2\n","proba_preds = randm_src2.predict_proba(X_valid)[:,1]\n","print(roc_auc_score(y_valid, proba_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0CKGSBK0qkgz","executionInfo":{"status":"ok","timestamp":1655131495425,"user_tz":180,"elapsed":282,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"ffd32da7-a2fc-4035-bf3a-64eb545e1ba8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.6815908506015597\n"]}]},{"cell_type":"code","source":["#validacion del 3\n","proba_preds = randm_src3.predict_proba(X_valid)[:,1]\n","print(roc_auc_score(y_valid, proba_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3d7KUj9Pqn-r","executionInfo":{"status":"ok","timestamp":1655131498243,"user_tz":180,"elapsed":278,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"1f0ac3bb-a3d0-492d-9303-0b41e16beb1f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.6847140430480348\n"]}]},{"cell_type":"code","source":["#validacion del 4 # este es el que Tiene mejor validacion \n","proba_preds = randm_src4.predict_proba(X_valid)[:,1]\n","print(roc_auc_score(y_valid, proba_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-HqWz3-YtrHV","executionInfo":{"status":"ok","timestamp":1655131500900,"user_tz":180,"elapsed":303,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"0cbbca3e-e0f6-4e3d-95fa-0f49fdec62f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.6858992100368388\n"]}]},{"cell_type":"code","source":["print('Mejor resultado se obtuvo con el 4 y fue: %s' %(roc_auc_score(y_valid, proba_preds)))\n","print('Los Hipermarametros que uso fueron: %s' % resultados4.best_params_)"],"metadata":{"id":"3tjUvOLt8C6X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655131509479,"user_tz":180,"elapsed":296,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"24569d1a-666b-4e41-cdf4-fe413e18583e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mejor resultado se obtuvo con el 4 y fue: 0.6858992100368388\n","Los Hipermarametros que uso fueron: {'C': 0.012150832398200799, 'max_iter': 230, 'solver': 'newton-cg'}\n"]}]},{"cell_type":"markdown","source":["# Grafico de la importancia de los features "],"metadata":{"id":"9RIjNy-9cheb"}},{"cell_type":"code","source":["clf = LogisticRegression(random_state=2, C = 0.012150832398200799, max_iter=230, solver= 'newton-cg' ).fit(X_train, y_train)\n","#como son tantos features no se llega a entender asique voy a mostrar solo los 20 mas importantes \n","\n","df = pd.DataFrame()\n","df['features'] = X_train.columns\n","df['importancia']= abs(clf.coef_)[0]\n","df.sort_values(ascending = False, inplace=True, by='importancia')\n","estos = df.head(20)\n","\n","plt.figure(dpi =150)\n","plt.bar(estos.features, estos.importancia )#tengo que ver que poner aca para que funcione)\n","plt.xlabel('Features')\n","plt.ylabel('Importancia segun el logistic regression')\n","plt.title('20 features mas importantes para predecir con el mejor modelo')\n","plt.xticks(rotation=90)\n","plt.show()\n","#####Por las dudas, el mejor es el LDA_00"],"metadata":{"id":"iaeDJ3ycvoIi"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Pruebo con el test, uso el modelo ya entrenado arriba pero tengo que codificar otra vez surprise 1, 2 y el content ya que es un archivo nuevo"],"metadata":{"id":"u4ANlRW7fBLy"}},{"cell_type":"code","source":["import pandas as pd\n","import sys\n","from sklearn.metrics import roc_auc_score\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn import preprocessing\n","import numpy as np\n","\n","ok = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/TP3-orga datos/testTP3')\n","\n","ok.sort_values('timedelta',ascending=False, inplace=True)#ordeno por las dudas de mas antiguo a mas reciente, despues lo tiro es solo por las dudas para cuando haga el split\n","\n","X = ok[[ 'n_tokens_title', 'n_tokens_content',\\\n","       'n_unique_tokens', 'n_non_stop_words', 'n_non_stop_unique_tokens',\\\n","       'num_hrefs', 'num_self_hrefs', 'num_imgs', 'num_videos',\\\n","       'average_token_length', 'num_keywords', 'data_channel_is_lifestyle',\\\n","       'data_channel_is_entertainment', 'data_channel_is_bus',\\\n","       'data_channel_is_socmed', 'data_channel_is_tech',\\\n","       'data_channel_is_world', 'kw_min_min', 'kw_max_min', 'kw_avg_min',\\\n","       'kw_min_max', 'kw_max_max', 'kw_avg_max', 'kw_min_avg', 'kw_max_avg',\\\n","       'kw_avg_avg', 'self_reference_min_shares', 'self_reference_max_shares',\\\n","       'self_reference_avg_sharess', 'weekday_is_monday', 'weekday_is_tuesday',\\\n","       'weekday_is_wednesday', 'weekday_is_thursday', 'weekday_is_friday',\\\n","       'weekday_is_saturday', 'weekday_is_sunday', 'is_weekend', 'LDA_00',\\\n","       'LDA_01', 'LDA_02', 'LDA_03', 'LDA_04', 'global_subjectivity',\\\n","       'global_sentiment_polarity', 'global_rate_positive_words',\\\n","       'global_rate_negative_words', 'rate_positive_words',\\\n","       'rate_negative_words', 'avg_positive_polarity', 'min_positive_polarity',\\\n","       'max_positive_polarity', 'avg_negative_polarity',\\\n","       'min_negative_polarity', 'max_negative_polarity', 'title_subjectivity',\\\n","       'title_sentiment_polarity', 'abs_title_subjectivity',\\\n","       'abs_title_sentiment_polarity','content', 'surprise1', 'surprise2']]\n","\n","Y = ok['popular']\n","\n","\n","\n","\n","X['n_tokens_title'].fillna(value = 0.0, inplace =True)\n","X['n_tokens_content'].fillna(value = 0.0, inplace =True)\n","X['n_unique_tokens'].fillna(value = 0.0, inplace =True)\n","X['n_non_stop_words'].fillna(value = 0.0, inplace =True)\n","X['n_non_stop_unique_tokens'].fillna(value = 0.0, inplace =True)\n","X['num_self_hrefs'].fillna(value = 0.0, inplace =True)\n","X['num_hrefs'].fillna(value = 0.0, inplace =True)\n","X['num_imgs'].fillna(value = 0.0, inplace =True)\n","X['num_videos'].fillna(value = 0.0, inplace =True)\n","X['num_keywords'].fillna(value = 0.0, inplace =True)\n","X['data_channel_is_bus'].fillna(value = 0.0, inplace =True)\n","X['data_channel_is_socmed'].fillna(value = 0.0, inplace =True)\n","X['data_channel_is_tech'].fillna(value = 0.0, inplace =True)\n","X['kw_min_min'].fillna(value = 0.0, inplace =True)\n","X['self_reference_avg_sharess'].fillna(value = 0.0, inplace =True)\n","X['kw_max_max'].fillna(value = 0.0, inplace =True)\n","X['kw_avg_min'].fillna(value = 0.0, inplace =True)\n","X['kw_min_avg'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_monday'].fillna(value = 0.0, inplace =True)\n","X['kw_max_min'].fillna(value = 0.0, inplace =True)\n","X['kw_min_max'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_tuesday'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_wednesday'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_thursday'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_friday'].fillna(value = 0.0, inplace =True)\n","X['weekday_is_saturday'].fillna(value = 0.0, inplace =True)\n","X['LDA_00'].fillna(value = 0.0, inplace =True)\n","X['LDA_01'].fillna(value = 0.0, inplace =True)\n","X['LDA_02'].fillna(value = 0.0, inplace =True)\n","X['LDA_03'].fillna(value = 0.0, inplace =True)\n","X['global_sentiment_polarity'].fillna(value = 0.0, inplace =True)\n","X['global_rate_positive_words'].fillna(value = 0.0, inplace =True)\n","X['global_rate_negative_words'].fillna(value = 0.0, inplace =True)\n","X['rate_positive_words'].fillna(value = 0.0, inplace =True)\n","X['rate_negative_words'].fillna(value = 0.0, inplace =True)\n","X['avg_positive_polarity'].fillna(value = 0.0, inplace =True)\n","X['max_positive_polarity'].fillna(value = 0.0, inplace =True)\n","X['avg_negative_polarity'].fillna(value = 0.0, inplace =True)\n","X['min_negative_polarity'].fillna(value = 0.0, inplace =True)\n","X['max_negative_polarity'].fillna(value = 0.0, inplace =True)\n","X['title_subjectivity'].fillna(value = 0.0, inplace =True)\n","X['abs_title_subjectivity'].fillna(value = 0.0, inplace =True)\n","X['abs_title_sentiment_polarity'].fillna(value = 0.0, inplace =True)\n","X['content'].fillna(value = 'Sin dato', inplace =True)\n","\n","X_descarte, X_test, y_descarte, y_test = train_test_split(X, Y, test_size=0.4, random_state=42)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sBriIAOcU9Ia","executionInfo":{"status":"ok","timestamp":1655141736001,"user_tz":180,"elapsed":734,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"3a941006-214d-4dc8-9798-fb8c1e392838"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py:6392: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  return self._update_inplace(result)\n"]}]},{"cell_type":"code","source":["#codifico surprise1 para el test\n","encoded_surprise1_test = ohe_surprise1.transform(X_test[['surprise1']]).todense().astype(int)\n","X_test.surprise1 = encoded_surprise1_test  \n","#codifico content para el test\n","encoded_content_test =vectorizer.transform(X_test['content'].tolist()).toarray()\n","X_test.content = encoded_content_test #idem para el X_valid\n","#codifico surprise2 para el test\n","encoded_surprise2_test = enc.transform(X_test[['surprise2']])                                         \n","X_test.surprise2 = encoded_surprise2_test  # idem para el X_test    \n"],"metadata":{"id":"PnubnZzJegR8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","proba_preds_test = randm_src4.predict_proba(X_test)[:,1]\n","roc_auc_score(y_test, proba_preds_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Te7bjSl93lor","executionInfo":{"status":"ok","timestamp":1655141301395,"user_tz":180,"elapsed":283,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"7a6a39ef-ae3d-40f7-c64c-6ae03458e949"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7200784087763599"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["# Guardo en un CSV las probabilidad de las predicciones, segun lei en el slack"],"metadata":{"id":"zzk6xkeykpQ_"}},{"cell_type":"code","source":["MyDF = pd.DataFrame()\n","MyDF['Probabilidad predicciones de test'] = proba_preds_test\n","MyDF.to_csv('ProbConPred_RegLog.csv')"],"metadata":{"id":"kZHJoVxtjsZR"},"execution_count":null,"outputs":[]}]}