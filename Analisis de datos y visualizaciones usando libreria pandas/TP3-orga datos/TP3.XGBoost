{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"TP3.XGBoost","provenance":[],"collapsed_sections":[],"mount_file_id":"1K_e6LUO3wMEgYLojHBTy3NPczq1Y6Jle","authorship_tag":"ABX9TyPySUyGKAmkbJhEmQyoTj8c"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"1sE067gsYntq"},"outputs":[],"source":["import xgboost as xgb\n","import pandas as pd\n","import random\n","import sys\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import roc_auc_score\n","from xgboost.sklearn import XGBClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.preprocessing import OrdinalEncoder\n","from sklearn import preprocessing\n","import numpy as np\n","from sklearn.model_selection import RandomizedSearchCV\n","from scipy import stats\n","from scipy.stats import randint as sp_randInt\n","from scipy.stats import loguniform\n","from sklearn.impute import SimpleImputer\n","algo = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/train')"]},{"cell_type":"markdown","source":["# Tomo los features que me interesen"],"metadata":{"id":"xuWypuC4A84Z"}},{"cell_type":"code","source":["# le quite datos y separo el target de los datos a entrenar\n","\n","X = algo[[ 'n_unique_tokens', 'n_non_stop_words', 'n_non_stop_unique_tokens',\\\n","       'num_hrefs', 'num_self_hrefs', 'num_imgs', 'num_videos',\\\n","       'average_token_length', 'num_keywords', 'data_channel_is_lifestyle',\\\n","       'data_channel_is_entertainment', 'data_channel_is_bus',\\\n","       'data_channel_is_socmed', 'data_channel_is_tech',\\\n","       'data_channel_is_world', 'kw_min_min', 'kw_max_min', 'kw_avg_min',\\\n","       'kw_min_max', 'kw_max_max', 'kw_avg_max', 'kw_min_avg', 'kw_max_avg',\\\n","       'kw_avg_avg', 'self_reference_min_shares', 'self_reference_max_shares',\\\n","       'self_reference_avg_sharess', 'weekday_is_monday', 'weekday_is_tuesday',\\\n","       'weekday_is_wednesday', 'weekday_is_thursday', 'weekday_is_friday',\\\n","       'weekday_is_saturday', 'weekday_is_sunday', 'is_weekend', 'LDA_00',\\\n","       'LDA_01', 'LDA_02', 'LDA_03', 'LDA_04', 'global_subjectivity',\\\n","       'global_sentiment_polarity', 'global_rate_positive_words',\\\n","       'global_rate_negative_words','content', 'surprise1', 'surprise2', 'popular']]#ya dorpeo el popular pero antes lo necesito para poder hacer el mean encoding\n","\n","Y = algo['popular']"],"metadata":{"id":"AQmnryy-ytAq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Separo los datos"],"metadata":{"id":"4GEZZt7CBSDp"}},{"cell_type":"code","source":["X_train, X_valid, y_train, y_valid = train_test_split(X, Y, test_size=0.4, random_state=42)"],"metadata":{"id":"uN_G_imeB1pF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Hago el Mean Encoder"],"metadata":{"id":"rNckJtJAGy6X"}},{"cell_type":"code","source":["#agrupo por clase y le calculo la media de cuantas veces aparecio cada una  \n","surprise2_mean_Encoded_Train = X_train.groupby(['surprise2'])['popular'].mean().to_dict()\n","surprise2_mean_Encoded_valid = X_valid.groupby(['surprise2'])['popular'].mean().to_dict()\n","\n","#paso los valores segun corresponda\n","X_train['surprise2'] = X_train['surprise2'].map(surprise2_mean_Encoded_Train)\n","X_valid['surprise2'] = X_valid['surprise2'].map(surprise2_mean_Encoded_Train)\n","#quito ya mismo el popular de el train y del validation\n","X_train.drop(columns='popular', inplace=True)\n","X_valid.drop(columns='popular', inplace=True)"],"metadata":{"id":"hRvfd8Xb-pgB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Limpieza de datos "],"metadata":{"id":"6XYXeLCJ9qyo"}},{"cell_type":"code","source":["#limpieza de datos\n","\n","#Asumo que los canales que no tenian dato no eran de ese canal\n","X_train['data_channel_is_bus'].fillna(value = 0.0, inplace =True)\n","X_valid['data_channel_is_bus'].fillna(value = 0.0, inplace =True)\n","\n","X_train['data_channel_is_socmed'].fillna(value = 0.0, inplace =True)\n","X_valid['data_channel_is_socmed'].fillna(value = 0.0, inplace =True)\n","\n","X_train['data_channel_is_tech'].fillna(value = 0.0, inplace =True)\n","X_valid['data_channel_is_tech'].fillna(value = 0.0, inplace =True)\n","\n","#a los dias asumo que si no tenian dato es porque no fue en ese dia\n","X_train['weekday_is_monday'].fillna(value = 0.0, inplace =True)\n","X_valid['weekday_is_monday'].fillna(value = 0.0, inplace =True)\n","\n","X_train['weekday_is_tuesday'].fillna(value = 0.0, inplace =True)\n","X_valid['weekday_is_tuesday'].fillna(value = 0.0, inplace =True)\n","\n","X_train['weekday_is_wednesday'].fillna(value = 0.0, inplace =True)\n","X_valid['weekday_is_wednesday'].fillna(value = 0.0, inplace =True)\n","\n","X_train['weekday_is_thursday'].fillna(value = 0.0, inplace =True)\n","X_valid['weekday_is_thursday'].fillna(value = 0.0, inplace =True)\n","\n","X_train['weekday_is_friday'].fillna(value = 0.0, inplace =True)\n","X_valid['weekday_is_friday'].fillna(value = 0.0, inplace =True)\n","\n","X_train['weekday_is_saturday'].fillna(value = 0.0, inplace =True)\n","X_valid['weekday_is_saturday'].fillna(value = 0.0, inplace =True)\n","\n","#le pongo algo a content para que no me rompa \n","X_train['content'].fillna(value = 'Sin dato', inplace =True)\n","X_valid['content'].fillna(value = 'Sin dato', inplace =True)\n","\n","#uso el simple imputer para todas las otras columnas y uso la media de su respectiva columna para llenar cada nan\n"],"metadata":{"id":"6XB18kYc2bIM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# codifico con OneHotEncoder surprise 1"],"metadata":{"id":"oh4QkaEPDLIF"}},{"cell_type":"code","source":["#codifico surprise1 \n","ohe_surprise1 = OneHotEncoder(drop='first')\n","encoded_surprise1 = ohe_surprise1.fit_transform(X_train[['surprise1']]).todense().astype(int)\n","\n","encoded_surprise1_valid = ohe_surprise1.transform(X_valid[['surprise1']]).todense().astype(int)\n","\n","X_train.surprise1 = encoded_surprise1  #pongo el surprise1 ya codificado en el X_train\n","\n","X_valid.surprise1 = encoded_surprise1_valid  # idem para el test"],"metadata":{"id":"wkwM-wvXb3yk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# codifico con el CountVectorizer el \"content\""],"metadata":{"id":"TLKrpS0WDfGN"}},{"cell_type":"code","source":["#codifico content \n","vectorizer = CountVectorizer(max_features = 25)\n","encoded_content = vectorizer.fit_transform(X_train['content'].tolist()).toarray()\n","encoded_content_valid =vectorizer.transform(X_valid['content'].tolist()).toarray()\n","\n","X_train.content = encoded_content #pongo el content ya codificado en el X_train\n","\n","X_valid.content = encoded_content_valid #idem para el X_valid\n"],"metadata":{"id":"clSaiEbPBBOE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Simple Imputer"],"metadata":{"id":"sKGbCJLJV8ue"}},{"cell_type":"code","source":["SimpImput1 = SimpleImputer(missing_values=np.nan,strategy='mean')\n","media_para_los_valores_faltantes_train = SimpImput1.fit_transform(X_train)\n","\n","media_para_los_valores_faltantes_valid = SimpImput1.fit_transform(X_valid) #no se por que no me deja hacerlo con un transform\n","X_train = media_para_los_valores_faltantes_train\n","X_valid = media_para_los_valores_faltantes_valid\n","######aca termina el simple imputer"],"metadata":{"id":"4ZacAEeBJEMQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Modelo con XGBoost"],"metadata":{"id":"H9a4WaRLDlST"}},{"cell_type":"code","source":["Model_xgb = xgb.XGBClassifier(objective = 'binary:logistic', random_state=2)\n","parameters = {'n_estimators': sp_randInt(100, 200),\n","              'learning_rate': stats.uniform(0.01, 0.4),\n","              'subsample': stats.uniform(0.3, 0.7),\n","              'max_depth': sp_randInt(3, 30),\n","              'colsample_bytree': stats.uniform(0.7, 0.3),\n","              'min_child_weight': [1, 2, 3, 4, 5, 6]            }\n","\n","#uso el randomizedSerch para automatizar la busqueda de parametros \n","randm_src = RandomizedSearchCV(estimator=Model_xgb, param_distributions = parameters, cv= 2, n_iter = 10, n_jobs=-1, random_state=2)\n","resultados = randm_src.fit(X_train, y_train)#toma 4 min"],"metadata":{"id":"rvDqLIo_HZBk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Mejor resultado: %s' % resultados.best_score_)\n","print('Mejores Hyperparametros: %s' % resultados.best_params_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hBvTrTYJpBJ7","executionInfo":{"status":"ok","timestamp":1655095292028,"user_tz":180,"elapsed":413,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"38e8b4b2-2902-4f21-dae3-4532f1520ee5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mejor resultado: 0.7986633897937427\n","Mejores Hyperparametros: {'colsample_bytree': 0.830798470642601, 'learning_rate': 0.020370492731156535, 'max_depth': 25, 'min_child_weight': 4, 'n_estimators': 182, 'subsample': 0.6393243677486289}\n"]}]},{"cell_type":"code","source":["proba_preds = randm_src.predict_proba(X_valid)[:,1]\n","print('Valor del rocauc en validacion:',roc_auc_score(y_valid, proba_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1ebSAZy8SW9e","executionInfo":{"status":"ok","timestamp":1655095298775,"user_tz":180,"elapsed":1250,"user":{"displayName":"Nico Allende","userId":"09334469959637297675"}},"outputId":"0d0bc01e-9d04-4f19-f2f1-16d6f2d2ea3b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.7129488192432623\n"]}]},{"cell_type":"markdown","source":["No busque aca el score del rocauc en el test porque, de los dos modelos este es el peor, por casi nada pero sigue siendo el peor"],"metadata":{"id":"AN9EYFI9sjsA"}}]}